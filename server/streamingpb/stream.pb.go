// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package streamingpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StreamingRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingRequest) Reset()         { *m = StreamingRequest{} }
func (m *StreamingRequest) String() string { return proto.CompactTextString(m) }
func (*StreamingRequest) ProtoMessage()    {}
func (*StreamingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{0}
}

func (m *StreamingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingRequest.Unmarshal(m, b)
}
func (m *StreamingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingRequest.Marshal(b, m, deterministic)
}
func (m *StreamingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingRequest.Merge(m, src)
}
func (m *StreamingRequest) XXX_Size() int {
	return xxx_messageInfo_StreamingRequest.Size(m)
}
func (m *StreamingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingRequest proto.InternalMessageInfo

type StreamingResponse struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingResponse) Reset()         { *m = StreamingResponse{} }
func (m *StreamingResponse) String() string { return proto.CompactTextString(m) }
func (*StreamingResponse) ProtoMessage()    {}
func (*StreamingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{1}
}

func (m *StreamingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingResponse.Unmarshal(m, b)
}
func (m *StreamingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingResponse.Marshal(b, m, deterministic)
}
func (m *StreamingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingResponse.Merge(m, src)
}
func (m *StreamingResponse) XXX_Size() int {
	return xxx_messageInfo_StreamingResponse.Size(m)
}
func (m *StreamingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingResponse proto.InternalMessageInfo

func (m *StreamingResponse) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*StreamingRequest)(nil), "streaming.StreamingRequest")
	proto.RegisterType((*StreamingResponse)(nil), "streaming.StreamingResponse")
}

func init() {
	proto.RegisterFile("stream.proto", fileDescriptor_bb17ef3f514bfe54)
}

var fileDescriptor_bb17ef3f514bfe54 = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0xf0, 0x32, 0xf3, 0xd2, 0x95,
	0x84, 0xb8, 0x04, 0x82, 0x61, 0x9c, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x4d, 0x2e,
	0x41, 0x24, 0xb1, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c,
	0xd2, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x08, 0xc7, 0x68, 0x3e, 0x23, 0x17, 0x27,
	0x5c, 0xad, 0x90, 0x07, 0x17, 0x3b, 0x84, 0x63, 0x28, 0x24, 0xad, 0x07, 0xb7, 0x43, 0x0f, 0xdd,
	0x02, 0x29, 0x19, 0xec, 0x92, 0x10, 0x9b, 0x94, 0x18, 0x0c, 0x18, 0x11, 0x26, 0x19, 0x51, 0x68,
	0x92, 0x13, 0x6f, 0x14, 0x37, 0x5c, 0x49, 0x41, 0x52, 0x12, 0x1b, 0x38, 0x04, 0x8c, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x7b, 0x4f, 0xfd, 0x89, 0x11, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamingClient is the client API for Streaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamingClient interface {
	Stream1(ctx context.Context, in *StreamingRequest, opts ...grpc.CallOption) (Streaming_Stream1Client, error)
	Stream2(ctx context.Context, in *StreamingRequest, opts ...grpc.CallOption) (Streaming_Stream2Client, error)
}

type streamingClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingClient(cc grpc.ClientConnInterface) StreamingClient {
	return &streamingClient{cc}
}

func (c *streamingClient) Stream1(ctx context.Context, in *StreamingRequest, opts ...grpc.CallOption) (Streaming_Stream1Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Streaming_serviceDesc.Streams[0], "/streaming.Streaming/Stream1", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingStream1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streaming_Stream1Client interface {
	Recv() (*StreamingResponse, error)
	grpc.ClientStream
}

type streamingStream1Client struct {
	grpc.ClientStream
}

func (x *streamingStream1Client) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingClient) Stream2(ctx context.Context, in *StreamingRequest, opts ...grpc.CallOption) (Streaming_Stream2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Streaming_serviceDesc.Streams[1], "/streaming.Streaming/Stream2", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingStream2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streaming_Stream2Client interface {
	Recv() (*StreamingResponse, error)
	grpc.ClientStream
}

type streamingStream2Client struct {
	grpc.ClientStream
}

func (x *streamingStream2Client) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingServer is the server API for Streaming service.
type StreamingServer interface {
	Stream1(*StreamingRequest, Streaming_Stream1Server) error
	Stream2(*StreamingRequest, Streaming_Stream2Server) error
}

// UnimplementedStreamingServer can be embedded to have forward compatible implementations.
type UnimplementedStreamingServer struct {
}

func (*UnimplementedStreamingServer) Stream1(req *StreamingRequest, srv Streaming_Stream1Server) error {
	return status.Errorf(codes.Unimplemented, "method Stream1 not implemented")
}
func (*UnimplementedStreamingServer) Stream2(req *StreamingRequest, srv Streaming_Stream2Server) error {
	return status.Errorf(codes.Unimplemented, "method Stream2 not implemented")
}

func RegisterStreamingServer(s *grpc.Server, srv StreamingServer) {
	s.RegisterService(&_Streaming_serviceDesc, srv)
}

func _Streaming_Stream1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServer).Stream1(m, &streamingStream1Server{stream})
}

type Streaming_Stream1Server interface {
	Send(*StreamingResponse) error
	grpc.ServerStream
}

type streamingStream1Server struct {
	grpc.ServerStream
}

func (x *streamingStream1Server) Send(m *StreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Streaming_Stream2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServer).Stream2(m, &streamingStream2Server{stream})
}

type Streaming_Stream2Server interface {
	Send(*StreamingResponse) error
	grpc.ServerStream
}

type streamingStream2Server struct {
	grpc.ServerStream
}

func (x *streamingStream2Server) Send(m *StreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Streaming_serviceDesc = grpc.ServiceDesc{
	ServiceName: "streaming.Streaming",
	HandlerType: (*StreamingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream1",
			Handler:       _Streaming_Stream1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stream2",
			Handler:       _Streaming_Stream2_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.proto",
}
